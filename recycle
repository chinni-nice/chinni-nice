import pgzrun
import random
font_option = (255,255,255)

width = 800
height = 600

center_x = width / 2
center_y = height / 2

center = (center_x,center_y)
final_level = 6
start_speed = 10
ITEMS = ["Bag","Battery","Bottle","Chips"]
game_over = False
game_complete = False
current_level = 1

items = []
animations = []

def draw():
    global items,game_over,current_level,game_complete
    screen.clear()
    screen.blit("bground",(0,0))
    if game_over:
        display_message("GAME OVER..","TRY AGAIN!")
    elif game_complete:
        display_message("YOU WON","WELL DONE!")
    else:
        for item in items:
            item.draw()
def update():
    global items
    if len(items) == 0:
        items = make_items(current_level)

def make_items(number_of_extra_items): #generates falling items
    items_to_create = get_option_to_create(number_of_extra_items)
    new_items = create_items(items_to_create)
    layout_items(new_items)
    animate_items(new_items)
    return new_items

def get_option_to_create(number_of_extra_items): 
    items_to_create = ["paper"]
    for i in range(0,number_of_extra_items):
        random_option = random.choice(ITEMS)
        items_to_create.append(random_option)
    return items_to_create #by default, paper needs to be there

def create_items(items_to_create):
    new_items = []
    for option in items_to_create:
        item = (Actor (option))
        new_items.append(item)
    return new_items

def layout_items(items_to_layout): #randomly gives equal distance between each item
    number_of_gaps = len(items_to_layout) +1
    gap_size = width / number_of_gaps
    random.shuffle(items_to_layout)
    for index,item in enumerate(items_to_layout):
        new_x_pos = (index + 1) * gap_size
        item.x = new_x_pos

def animate_items(items_to_animate): #animates each item from top -> bottom
    global animations
    for item in items_to_animate:
        duration = start_speed - current_level
        item.anchor = ("center","bottom") #makes sure items fall naturally
        animation = animate(item,duration = duration,on_finished = handle_game_over, y = height) #if item(s) fall from top to bottom then game = over
        animations.append(animation)

def handle_game_over(): #look at line 72
    global game_over
    game_over = True

def on_mouse_down(pos): #whenever player clicks on an item and if the item is paper, the player advances to the next level. if they click anything else, game = over
    global items,current_level
    for item in items:
        if item.collidepoint(pos):
            if "paper" in item.image:
                handle_game_complete()
            else:
                handle_game_over()


def handle_game_complete(): #makes player go to next level, but if player = last level, game completes
    global current_level,items,animations,game_complete
    stop_animations(animations)
    if current_level == final_level:
        game_complete = True
    else:
        current_level += 1
        items = []
        animations = []

def stop_animations(animations_to_stop): 
        for animation in animations_to_stop:
            if animation.running:
                animation.stop()

def display_message(heading_text,subheading_text): #displays message
    screen.draw.text(heading_text,fontsize = 60,center = center,color = "white")
    screen.draw.text(subheading_text,fontsize = 30,center = (center_x,center_y + 30),color = "white")

pgzrun.go()
